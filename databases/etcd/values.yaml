global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  compatibility:
    openshift:
      adaptSecurityContext: auto
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
image:
  registry: docker.io
  repository: bitnami/etcd
  tag: 3.5.11
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
auth:
  rbac:
    create: true
    allowNoneAuthentication: true
    rootPassword: ""
    existingSecret: ""
    existingSecretPasswordKey: ""
  token:
    enabled: true
    type: jwt
    privateKey:
      filename: jwt-token.pem
      existingSecret: ""
    signMethod: RS256
    ttl: 10m
  client:
    secureTransport: false
    useAutoTLS: false
    existingSecret: ""
    enableAuthentication: false
    certFilename: cert.pem
    certKeyFilename: key.pem
    caFilename: ""
  peer:
    secureTransport: false
    useAutoTLS: false
    existingSecret: ""
    enableAuthentication: false
    certFilename: cert.pem
    certKeyFilename: key.pem
    caFilename: ""
autoCompactionMode: ""
autoCompactionRetention: ""
initialClusterState: ""
initialClusterToken: "etcd-cluster-k8s"
logLevel: "info"
maxProcs: ""
removeMemberOnContainerTermination: true
configuration: ""
existingConfigmap: ""
extraEnvVars:
  - name: ALLOW_NONE_AUTHENTICATION
    value: "yes"
  - name: ETCD_ADVERTISE_CLIENT_URLS
    value: "http://etcd:2379"
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
command: []
args: []
replicaCount: 1
updateStrategy:
  type: RollingUpdate
podManagementPolicy: Parallel
automountServiceAccountToken: false
hostAliases: []
lifecycleHooks: {}
containerPorts:
  client: 2379
  peer: 2380
  metrics: 9090
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
resourcesPreset: "micro"
resources: {}
livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
readinessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
startupProbe:
  enabled: false
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 60
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
extraVolumes:
  - name: etcd-data
    persistentVolumeClaim:
      claimName: etcd-pvc
extraVolumeMounts:
  - name: etcd-data
    mountPath: /bitnami/etcd
extraVolumeClaimTemplates: []
initContainers: []
sidecars: []
podAnnotations: {}
podLabels: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
terminationGracePeriodSeconds: ""
schedulerName: ""
priorityClassName: ""
runtimeClassName: ""
shareProcessNamespace: false
topologySpreadConstraints: []
persistentVolumeClaimRetentionPolicy:
  enabled: false
  whenScaled: Retain
  whenDeleted: Retain
service:
  type: ClusterIP
  enabled: true
  clusterIP: ""
  ports:
    client: 2379
    peer: 2380
    metrics: 9090
  nodePorts:
    client: ""
    peer: ""
    metrics: ""
  clientPortNameOverride: ""
  peerPortNameOverride: ""
  metricsPortNameOverride: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalIPs: []
  externalTrafficPolicy: Cluster
  extraPorts: []
  annotations: {}
  sessionAffinity: None
  sessionAffinityConfig: {}
  headless:
    annotations: {}
persistence:
  enabled: true
  storageClass: ""
  annotations: {}
  labels: {}
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  selector: {}
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r24
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
metrics:
  enabled: false
  useSeparateEndpoint: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.metrics.useSeparateEndpoint | ternary .Values.containerPorts.metrics .Values.containerPorts.client }}"
  podMonitor:
    enabled: false
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 30s
    additionalLabels: {}
    scheme: http
    tlsConfig: {}
    relabelings: []
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels: {}
    rules: []
startFromSnapshot:
  enabled: false
  existingClaim: ""
  snapshotFilename: ""
disasterRecovery:
  enabled: false
  cronjob:
    schedule: "*/30 * * * *"
    historyLimit: 1
    snapshotHistoryLimit: 1
    snapshotsDir: "/snapshots"
    podAnnotations: {}
    resourcesPreset: "nano"
    resources: {}
    nodeSelector: {}
    tolerations: []
    podLabels: {}
    serviceAccountName: ""
  pvc:
    existingClaim: ""
    size: 2Gi
    storageClassName: nfs
    subPath: ""
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false
  annotations: {}
  labels: {}
pdb:
  create: true
  minAvailable: 51%
  maxUnavailable: ""