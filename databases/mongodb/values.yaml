global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  namespaceOverride: ""
  compatibility:
    openshift:
      adaptSecurityContext: auto
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
kubeVersion: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
topologyKey: ""
serviceBindings:
  enabled: false
enableServiceLinks: true
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
image:
  registry: docker.io
  repository: mongo
  tag: latest
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
schedulerName: ""
architecture: standalone
useStatefulSet: false
auth:
  enabled: true
  rootUser: root
  rootPassword: ""
  usernames: []
  passwords: []
  databases: []
  username: ""
  password: ""
  database: "python_backend"
  replicaSetKey: ""
  existingSecret: ""
tls:
  enabled: false
  mTLS:
    enabled: true
  autoGenerated: true
  existingSecret: ""
  caCert: ""
  caKey: ""
  pemChainIncluded: false
  standalone:
    existingSecret: ""
  replicaset:
    existingSecrets: []
  hidden:
    existingSecrets: []
  arbiter:
    existingSecret: ""
  image:
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.27.0-debian-12-r2
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  extraDnsNames: []
  mode: requireTLS
  resourcesPreset: "nano"
  resources: {}
  securityContext: {}
automountServiceAccountToken: false
hostAliases: []
replicaSetName: rs0
replicaSetHostnames: true
enableIPv6: false
directoryPerDB: false
systemLogVerbosity: 0
disableSystemLog: false
disableJavascript: false
enableJournal: true
configuration: ""
replicaSetConfigurationSettings:
  enabled: false
  configuration: {}
existingConfigmap: ""
initdbScripts: {}
initdbScriptsConfigMap: ""
command: ["mongod", "--replSet", "debezium", "--bind_ip_all"]
args: []
extraFlags: []
extraEnvVars:
  - name: MONGO_INITDB_DATABASE
    value: "python_backend"
  - name: MONGO_INITDB_FEATURES
    value: "1"
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
annotations: {}
labels: {}
replicaCount: 1
updateStrategy:
  type: RollingUpdate
podManagementPolicy: OrderedReady
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
lifecycleHooks: {}
terminationGracePeriodSeconds: ""
podLabels: {}
podAnnotations: {}
priorityClassName: ""
runtimeClassName: ""
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  supplementalGroups: []
  fsGroup: 1001
  sysctls: []
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
resourcesPreset: "small"
resources: {}
containerPorts:
  mongodb: 27017
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 10
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
startupProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 20
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 30
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
initContainers: []
sidecars: []
extraVolumeMounts: []
extraVolumes: []
pdb:
  create: true
  minAvailable: ""
  maxUnavailable: ""
service:
  nameOverride: ""
  type: ClusterIP
  portName: mongodb
  ports:
    mongodb: 27017
  nodePorts:
    mongodb: ""
  clusterIP: ""
  externalIPs: []
  loadBalancerIP: ""
  loadBalancerClass: ""
  loadBalancerSourceRanges: []
  allocateLoadBalancerNodePorts: true
  extraPorts: []
  annotations: {}
  externalTrafficPolicy: Local
  sessionAffinity: None
  sessionAffinityConfig: {}
  headless:
    annotations: {}
externalAccess:
  enabled: false
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.30.2-debian-12-r0
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    resourcesPreset: "nano"
    resources: {}
  dnsCheck:
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r23
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    resourcesPreset: "nano"
    resources: {}
  externalMaster:
    enabled: false
    host: ""
    port: 27017
  service:
    type: LoadBalancer
    portName: "mongodb"
    ports:
      mongodb: 27017
    loadBalancerIPs: []
    publicNames: []
    loadBalancerClass: ""
    loadBalancerSourceRanges: []
    allocateLoadBalancerNodePorts: true
    externalTrafficPolicy: Local
    nodePorts: []
    domain: ""
    extraPorts: []
    annotations: {}
    annotationsList: []
    sessionAffinity: None
    sessionAffinityConfig: {}
  hidden:
    enabled: false
    service:
      type: LoadBalancer
      portName: "mongodb"
      ports:
        mongodb: 27017
      loadBalancerIPs: []
      loadBalancerClass: ""
      loadBalancerSourceRanges: []
      allocateLoadBalancerNodePorts: true
      externalTrafficPolicy: Local
      nodePorts: []
      domain: ""
      extraPorts: []
      annotations: {}
      sessionAffinity: None
      sessionAffinityConfig: {}
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  addExternalClientAccess: true
  extraIngress: []
  extraEgress: []
  ingressPodMatchLabels: {}
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
persistence:
  enabled: true
  name: "datadir"
  medium: ""
  existingClaim: ""
  resourcePolicy: ""
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}
  labels: {}
  mountPath: /data/db
  subPath: ""
  volumeClaimTemplates:
    selector: {}
    requests: {}
    dataSource: {}
persistentVolumeClaimRetentionPolicy:
  enabled: false
  whenScaled: Retain
  whenDeleted: Retain
backup:
  enabled: false
  cronjob:
    schedule: "@daily"
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    startingDeadlineSeconds: ""
    ttlSecondsAfterFinished: ""
    restartPolicy: OnFailure
    backoffLimit: 6
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    command: []
    labels: {}
    annotations: {}
    storage:
      existingClaim: ""
      resourcePolicy: ""
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      annotations: {}
      mountPath: /backup/mongodb
      subPath: ""
      volumeClaimTemplates:
        selector: {}
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: false
rbac:
  create: false
  rules: []
podSecurityPolicy:
  create: false
  allowPrivilegeEscalation: false
  privileged: false
  spec: {}
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r23
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
  securityContext:
    seLinuxOptions: {}
    runAsUser: 0
arbiter:
  enabled: true
  automountServiceAccountToken: false
  hostAliases: []
  configuration: ""
  existingConfigmap: ""
  command: []
  args: []
  extraFlags: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  annotations: {}
  labels: {}
  topologySpreadConstraints: []
  lifecycleHooks: {}
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  schedulerName: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  runtimeClassName: ""
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    supplementalGroups: []
    fsGroup: 1001
    sysctls: []
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "small"
  resources: {}
  containerPorts:
    mongodb: 27017
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  service:
    nameOverride: ""
    ports:
      mongodb: 27017
    extraPorts: []
    annotations: {}
    headless:
      annotations: {}
hidden:
  enabled: false
  automountServiceAccountToken: false
  hostAliases: []
  configuration: ""
  existingConfigmap: ""
  command: []
  args: []
  extraFlags: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  annotations: {}
  labels: {}
  topologySpreadConstraints: []
  lifecycleHooks: {}
  replicaCount: 1
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  schedulerName: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  runtimeClassName: ""
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    supplementalGroups: []
    fsGroup: 1001
    sysctls: []
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "micro"
  resources: {}
  containerPorts:
    mongodb: 27017
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  persistence:
    enabled: true
    medium: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    mountPath: /bitnami/mongodb
    subPath: ""
    volumeClaimTemplates:
      selector: {}
      requests: {}
      dataSource: {}
  service:
    portName: "mongodb"
    ports:
      mongodb: 27017
    extraPorts: []
    annotations: {}
    headless:
      annotations: {}
metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/mongodb-exporter
    tag: 0.40.0-debian-12-r30
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  username: ""
  password: ""
  compatibleMode: true
  collector:
    all: false
    diagnosticdata: true
    replicasetstatus: true
    dbstats: false
    topmetrics: false
    indexstats: false
    collstats: false
    collstatsColls: []
    indexstatsColls: []
    collstatsLimit: 0
  extraFlags: ""
  command: []
  args: []
  resourcesPreset: "nano"
  resources: {}
  containerPort: 9216
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
      prometheus.io/path: "/metrics"
    type: ClusterIP
    ports:
      metrics: 9216
    extraPorts: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraVolumeMounts: []
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []
    labels: {}
    selector: {}
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []