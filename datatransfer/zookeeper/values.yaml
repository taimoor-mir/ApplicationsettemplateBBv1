global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  compatibility:
    openshift:
      adaptSecurityContext: auto
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
namespaceOverride: ""
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
image:
  registry: docker.io
  repository: confluentinc/cp-zookeeper
  tag: 5.3.0
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
auth:
  client:
    enabled: false
    clientUser: ""
    clientPassword: ""
    serverUsers: ""
    serverPasswords: ""
    existingSecret: ""
  quorum:
    enabled: false
    learnerUser: ""
    learnerPassword: ""
    serverUsers: ""
    serverPasswords: ""
    existingSecret: ""
tickTime: 2000
initLimit: 10
syncLimit: 5
preAllocSize: 65536
snapCount: 100000
maxClientCnxns: 60
maxSessionTimeout: 40000
heapSize: 1024
fourlwCommandsWhitelist: srvr, mntr, ruok
minServerId: 1
listenOnAllIPs: false
autopurge:
  snapRetainCount: 10
  purgeInterval: 1
logLevel: ERROR
jvmFlags: ""
dataLogDir: ""
configuration: ""
existingConfigmap: ""
extraEnvVars: 
  - name: KAFKA_JMX_HOSTNAME
    value: "localhost"
  - name: KAFKA_JMX_PORT
    value: "31000"
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
args: []
replicaCount: 1
revisionHistoryLimit: 10
containerPorts:
  client: 2181
  tls: 3181
  follower: 2888
  election: 3888
  adminServer: 8080
  metrics: 9141
  jmx: 31000
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
  probeCommandTimeout: 3
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
  probeCommandTimeout: 2
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 15
  successThreshold: 1
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
lifecycleHooks: {}
resourcesPreset: "micro"
resources: {}
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
automountServiceAccountToken: false
hostAliases: []
podLabels: {}
podAnnotations: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podManagementPolicy: Parallel
priorityClassName: ""
schedulerName: ""
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}
extraVolumes: []
extraVolumeMounts: []
sidecars: []
initContainers: []
pdb:
  create: true
  minAvailable: ""
  maxUnavailable: ""
enableServiceLinks: true
dnsPolicy: ""
dnsConfig: {}
service:
  type: ClusterIP
  ports:
    client: 2181
    tls: 3181
    follower: 2888
    election: 3888
    jmx: 31000
  nodePorts:
    client: ""
    tls: ""
  disableBaseClientPort: false
  sessionAffinity: None
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
  headless:
    publishNotReadyAddresses: true
    annotations: {}
    servicenameOverride: ""
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false
  annotations: {}
persistence:
  enabled: true
  existingClaim: ""
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}
  labels: {}
  selector: {}
  dataLogDir:
    size: 8Gi
    existingClaim: ""
    selector: {}
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r24
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 0
metrics:
  enabled: false
  service:
    type: ClusterIP
    port: 9141
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
      prometheus.io/path: "/metrics"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    additionalLabels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels: {}
    rules: []
tls:
  client:
    enabled: false
    auth: "none"
    autoGenerated: false
    existingSecret: ""
    existingSecretKeystoreKey: ""
    existingSecretTruststoreKey: ""
    keystorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.keystore.jks
    truststorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.truststore.jks
    passwordsSecretName: ""
    passwordsSecretKeystoreKey: ""
    passwordsSecretTruststoreKey: ""
    keystorePassword: ""
    truststorePassword: ""
  quorum:
    enabled: false
    auth: "none"
    autoGenerated: false
    existingSecret: ""
    existingSecretKeystoreKey: ""
    existingSecretTruststoreKey: ""
    keystorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.keystore.jks
    truststorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.truststore.jks
    passwordsSecretName: ""
    passwordsSecretKeystoreKey: ""
    passwordsSecretTruststoreKey: ""
    keystorePassword: ""
    truststorePassword: ""
  resourcesPreset: "nano"
  resources: {}